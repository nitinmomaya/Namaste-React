Q1. What is Microservices?

-> Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are

   Independently deployable
   Loosely coupled
   Organized around business capabilities
   Owned by a small team
   Highly maintainable and testable

 Q2. What is monolithic architecture?

 ->  Monolithic applications are designed to handle multiple related tasks. They’re typically complex applications that encompass several tightly coupled functions. 

    For example, consider a monolithic ecommerce SaaS application. It might contain a web server, a load balancer, a catalog service that services up product images, 
    an ordering system, a payment function, and a shipping component.

    As you can imagine, given their broad scope, monolithic tools tend to have huge code bases. Making a small change in a single function can require compiling and 
    testing the entire platform, which goes against the agile approach today’s developers favor.

Q3. what is difference between microservices and monolithic?

-> Basic
            Monolithic:-Monolithic architecture is built as one large system and is usually one code-base
            Microservices:-Microservices architecture is built as small independent module based on business functionality
   Scale
            Monolithic:-It is not easy to scale based on demand
            Microservices:-It is easy to scale based on demand.

   Database
            Monolithic:-It has shared database
            Microservices:-Each project and module has their own database

   Deployment
            Monolithic:-Large code base makes IDE slow and build time gets increase.
            Microservices:-Each project is independent and small in size. So overall build and development time gets decrease.

   Tightly Coupled and Loosely coupled
            Monolithic:-It extremely difficult to change technology or language or framework because everything is tightly coupled and depend on each other
            Microservices:-Easy to change technology or framework because every module and project is independent

Q4. Why do we need useEffect?

-> The useEffect Hook allows you to perform side effects in your components.Some examples of side effects are: fetching data, directly updating the DOM, and timers.
   useEffect accepts two arguments. The second argument is optional.

Q5. What is optional chaining?

-> The optional chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called is undefined or null, 
   it returns undefined instead of throwing an error.

Q6. What is Shimmer UI?

-> A shimmer UI resembles the page's actual UI, so users will understand how quickly the web or mobile app will load even before the content has shown up.

Q7. What is CORS?

-> Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources.
   CORS also relies on a mechanism by which browsers make a "preflight" request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. 
   In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.

Q8. What is async and await? 

-> async makes a function return a Promise. await makes a function wait for a Promise.

Q9. what is the use of 'const json = await data.json()' ?

-> JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data 
   in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa).